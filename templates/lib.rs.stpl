#![cfg(test)]

use runtime::*;
use frame_remote_externalities::{
	Builder, Mode, OfflineConfig, SnapshotConfig,
};
use std::fs::File;
use std::io::BufReader;
use sp_core::crypto::Ss58Codec;

type AccountId = <Runtime as frame_system::Config>::AccountId;

// Your replay logic here:
//
// This can be treated as a unit test like in the Polkadot-SDK repo. The runtime is in scope as
// `runtime` and pallets can be accessed like eg `System::block_number()`.
fn replay(block: Block) {
	Executive::initialize_block(&block.header);

	for extrinsic in block.extrinsics {
		let _ = Executive::apply_extrinsic(extrinsic);
	}

	eprintln!("Events: {:#?}", System::events());

	let _ = Executive::finalize_block();
}

#[tokio::test]
async fn main() {
	sp_tracing::try_init_simple();

	let raw_block = File::open("<%= &self.raw_block_path %>")
		.expect("Block file not found");
    let reader = BufReader::new(raw_block);
	let block: Block = serde_json::from_reader(reader)
		.expect("Block decoding failed");
	
	let state_snapshot = SnapshotConfig::new("<%= &self.snap_path %>");
	Builder::<Block>::default()
		.mode(Mode::Offline(
			OfflineConfig { state_snapshot },
		))
		.build()
		.await
		.unwrap()
		.execute_with(|| {
			replay(block);
		});
}
